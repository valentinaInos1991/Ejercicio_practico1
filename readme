Evaluaci√≥n M√≥dulo 3 - Laboratorio 1
----------------------------------------------------------------

‚ñ™ Explica en el archivo README la complejidad de los algoritmos utilizados, aplicando conceptos de Big-O y complejidad ciclom√°tica.
* Algoritmo de B√∫squeda (Encontrar un doctor espec√≠fico) :Se utiliz√≥ el m√©todo find() de JavaScript para buscar un doctor en el arreglo de doctores por su nombre. Este m√©todo recorre el arreglo hasta encontrar un elemento que cumpla con la condici√≥n.
* Complejidad Temporal (Big-O): Caso promedio y peor caso: ùëÇ(ùëõ)O(n), donde n es el n√∫mero de doctores en el arreglo. Esto se debe a que, en el peor caso, el algoritmo podr√≠a tener que revisar todos los elementos del arreglo antes de encontrar el resultado o confirmar que no existe. 
* Mejor caso: ùëÇ(1)O(1), si el primer elemento cumple con la condici√≥n. Complejidad Espacial: ùëÇ(1)O(1), ya que no utiliza espacio adicional significativo.
* Complejidad Ciclom√°tica: La complejidad ciclom√°tica es 1 porque no hay ramas ni bucles expl√≠citos en el c√≥digo.

* Algoritmo de Ordenamiento (Ordenar doctores por a√±os de experiencia): Se utiliz√≥ el m√©todo sort() de JavaScript para ordenar el arreglo de doctores seg√∫n sus a√±os de experiencia en orden ascendente.
* Complejidad Temporal (Big-O): El m√©todo sort() utiliza una implementaci√≥n optimizada (generalmente QuickSort o Timsort): Promedio: ùëÇ(ùëõlog‚Å°ùëõ)O(nlogn), donde n es el n√∫mero de elementos en el arreglo.Peor caso: ùëÇ(ùëõ2)O(n 2 ), si el m√©todo implementa QuickSort y el arreglo est√° muy desbalanceado. En la pr√°ctica, para la mayor√≠a de los navegadores modernos (que usan Timsort), el peor caso tambi√©n es ùëÇ(ùëõlog‚Å°ùëõ)O(nlogn).Complejidad Espacial:Promedio: ùëÇ(log‚Å°ùëõ)O(logn), debido a la pila de recursi√≥n en uickSort o al manejo de subarreglos en Timsort.
* Complejidad Ciclom√°tica: La complejidad ciclom√°tica es 1 porque no hay ramas ni bucles expl√≠citos en el c√≥digo. Todo el trabajo es realizado internamente por el m√©todo sort().

‚ñ™  Explicaci√≥n de c√≥mo se implementaron los objetos JSON y las operaciones realizadas (clonaci√≥n, merge, recorrido).
*Los objetos JSON se dise√±aron para representar un listado de doctores en el hospital. Cada doctor incluye informaci√≥n como nombre, especialidad, a√±os de experiencia y disponibilidad. Adem√°s, cada objeto tiene informaci√≥n adicional organizada en propiedades anidadas, como horario de atenci√≥n y contacto.*

*Clonaci√≥n: Se us√≥ JSON.stringify() para evitar modificar objetos originales.*
*Fusi√≥n: Se utiliz√≥ el operador spread (...) para combinar propiedades de objetos.*
*Recorrido: Se emple√≥ forEach para iterar y filtrar datos.*
*Stringify: Convierte objetos JSON a cadenas para mostrar en consola o enviar como datos serializados.*

‚ñ™ Explicaci√≥n de las estructuras de datos implementadas (arreglos, pilas, colas) y
su utilidad en el proyecto.
*Arreglos: Almacenar y gestionar datos relacionados con los doctores.*
*Pilas: Gestionar citas m√©dicas en el orden de agendamiento, priorizando las √∫ltimas.*
*Colas	Organizar el turno de pacientes seg√∫n su orden de llegada.*


Taller 2 M√≥dulo 3
--------------------
 INSTRUCCIONES PARA VER LO QUE SE PIDE EN LA TAREA:
* 1.- VALIDACI√ìN DE DATOS INGRESADOR POR EL USUARIO: ABRIR INDEX.HTML Y APARECER√Å UN ALERT DICIENDO QUE DEBE PRESIONAR EL BOT√ìN "RESERVA TU HORA", AL PRESIONAR EL BOT√ìN SE ABRIR√ÅN LOS PROMTS PARA PEDIR LA INFORMACI√ìN.
* 2.- CICLOS E ITERACIONES EN LA INTERFAZ: ABRIR LA PAGINA EQUIPO.HTML, APARECER√Å UN ALERT DICIENDO QUE DEBE PRESIONAR EL BOTON "VER" PARA VER LA LISTA DE LOS M√âDICOS CON M√ÅS DE 5 A√ëOS DE EXPERIENCIA. DEBE BAJAR UN POCO M√ÅS Y VER√Å EL BOT√ìN, AL PRESIONARLO APARECER√Å UN MODAL CON LA LISTA DE LOS M√âDICOS. 

Instrucciones sobre c√≥mo usar el debugger y el manejo de errores con try/catch:
*El proyecto utiliza try/catch para manejar errores durante las validaciones. Si los datos ingresados por el usuario no son v√°lidos, se lanza un error personalizado con throw new Error. Este error se captura en el bloque catch y se muestra al usuario mediante un mensaje de alerta. Tambi√©n aparecen los errores en la consola*
* Para utlizar el debugger, luego de ingresar los datos a trav√©s de los prompts se activar√° el debugger en donde se debe abrir la inspecci√≥n para rastrear c√≥mo se procesan las variables y validaciones. Haciendo click en el boton siguiente se podr√° salir del debugger.
* Para ver como se capturan los errores de try/catch se debe ingresa un dato incorrecto, ej: poner letras en el telefono y el error aparecer√° en la consola de la inspecci√≥n.

Explicaci√≥n del scope de variables y el uso de operadores:
* Scope de Variables:
----------------------
* Las variables nombre, email y telefono est√°n definidas dentro del alcance de la funci√≥n del evento click. Esto asegura que sean accesibles √∫nicamente durante la ejecuci√≥n de la validaci√≥n y no est√©n disponibles globalmente.
* Operadores Utilizados:
* Operador l√≥gico &&: Se usa para asegurarse de que todas las condiciones se cumplan antes de validar los datos.
* Operador l√≥gico ||: Se emplea para manejar varias condiciones de error en las validaciones.
* typeof: Comprueba el tipo de dato ingresado (cadena en este caso).
* isNaN: Verifica si un valor no es un n√∫mero v√°lido.

Descripci√≥n de la integraci√≥n de prompts y c√≥mo se validan los datos ingresados por el usuario:
* Se agregan prompts en la p√°gina de inicio para indicar al usuario que debe presionar el bot√≥n "Reservar tu hora" para ingresar sus datos a trav√©s de prompts que piden sus datos.
* Luego de que se ingresan los datos se muestran alerts en el caso de que alg√∫n dato est√© err√≥neo, indica que dato se debe corregir, de lo contrario si los datos son correctos, aparece un alert indicando que todos los datos son correctos. Tambi√©n aparecen mensajes en la consola dependiendo si los datos son correctos o incorrectos.

Explicaci√≥n uso de debugger para rastrear posibles errores dentro del c√≥digo:
* Uso debugger en el bloque de validaci√≥n del nombre para inspeccionar el flujo del programa y confirmar que las variables nombre y email contienen los valores correctos.

Explica en el archivo README c√≥mo funciona el event loop (stack, heap,queue) en JavaScript:
* El event loop es una parte fundamental de JavaScript que organiza la ejecuci√≥n del c√≥digo, especialmente para funciones asincr√≥nicas. A grandes rasgos, funciona as√≠:

    *Stack (pila):
    - Aqu√≠ se almacenan las tareas para ejecutar en el orden en que llegan.
    *Heap (mont√≥n):
    - Un espacio en memoria donde se almacenan objetos y variables.
    *Queue (cola): 
    -Donde se guardan las tareas en espera (por ejemplo, callbacks de eventos).

    *Cuando una tarea se ejecuta, se coloca en el stack. Si una tarea es asincr√≥nica (como una solicitud a un servidor), se pasa a la queue y se maneja cuando el stack est√© vac√≠o.

Taller 1 Modulo 3
------------------

¬øEs recomendable incluir JavaScript avanzado o TypeScript en el proyecto?

* En conclusi√≥n, s√≠ es recomendable implementar JavaScript avanzado o TypeScript en el sitio web del hospital si se busca un proyecto escalable y de alta calidad a largo plazo. TypeScript en particular ofrecer√≠a beneficios en t√©rminos de mantenimiento, seguridad y reducci√≥n de errores.
* Dado el tiempo que tenemos para realizar el proyecto y sin experiencia TypeScript, podr√≠a ser m√°s pr√°ctico optar solo por JavaScript avanzado. Sin embargo, si en un futuro el sitio web requiere altos requerimientos de seguridad y estabilidad, el uso de TypeScript representa una mejor alternativa.

Ejercicio pr√°ctico 3
--------------------

Ejercicio Pr√°ctico: Desarrollo de la P√°gina Web de un Hospital

Descripci√≥n del Proyecto
--------------------------

* Este proyecto consiste en la creaci√≥n de un sitio web modularizado para un hospital ficticio, usando SASS para organizar y estructurar los estilos CSS de manera eficiente. La modularizaci√≥n facilita el mantenimiento, la escalabilidad del c√≥digo y permite la reutilizaci√≥n de componentes comunes en varias p√°ginas del sitio.

Implementaci√≥n de la Modularizaci√≥n de Estilos y Media Queries
---------------------------------------------------------------

* Modularizaci√≥n de Estilos: Cada secci√≥n de la p√°gina (como la cabecera, el pie de p√°gina, la navegaci√≥n y las tarjetas) est√° separada en archivos SASS individuales. Esto permite trabajar en cada componente por separado sin interferir con otros.

* Media Queries: Las consultas de media (media queries) se implementaron en cada componente donde eran necesarias, en lugar de centralizarlas todas en un archivo. As√≠, cada archivo SASS contiene las adaptaciones espec√≠ficas para la pantalla de cada componente, manteniendo el c√≥digo m√°s ordenado y f√°cil de localizar.

* Integraci√≥n Boostrap: Se integr√≥ Bootstrap en el proyecto para mejorar la responsividad de la p√°gina y facilitar la implementaci√≥n de componentes din√°micos. A continuaci√≥n se detallan las secciones que se personalizaron utilizando Bootstrap:

* Navbar: Se utiliz√≥ la estructura de Bootstrap para el men√∫ de navegaci√≥n, adapt√°ndolo a la l√≠nea gr√°fica del hospital. La barra de navegaci√≥n es completamente responsiva, y sus colores, tipograf√≠a y espaciado fueron personalizados para coincidir con el dise√±o establecido.

* Tarjetas: Las tarjetas para mostrar informaci√≥n de los servicios tambi√©n se construyeron usando clases de Bootstrap. Estas se personalizaron con CSS para ajustar colores, bordes y sombras, logrando un estilo acorde a la identidad visual del hospital y asegurando que se adapten a cualquier tama√±o de pantalla.

* Botones: Se utilizaron botones de Bootstrap en diversas partes del sitio, incluyendo llamados a la acci√≥n para "Reservar cita" y "Contactar". Los botones fueron estilizados para que cumplan con el esquema de colores del hospital y se mantengan accesibles y visibles en todos los dispositivos.

* Cada componente de Bootstrap fue ajustado para alinearse con la l√≠nea gr√°fica del hospital, utilizando una combinaci√≥n de variables SASS y estilos personalizados. Esto asegura que el dise√±o sea coherente y que el sitio refleje la identidad profesional y confiable del hospital.

Instrucciones para Visualizar el Proyecto
--------------------------------------------
1- Instalaci√≥n de Dependencias: Aseg√∫rate de tener SASS instalado globalmente en tu entorno:
* npm install -g sass

2- Compilaci√≥n del C√≥digo SASS: Ejecuta el siguiente comando desde la carpeta ra√≠z del proyecto para compilar los archivos SASS:
* sass --watch styles/main.scss:dist/estilo.css

3- Visualizaci√≥n en Navegador: 
* Abre el archivo index.html en tu navegador web buscando el archivo index.html en la carpeta pages.